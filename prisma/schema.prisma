// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?   @db.Text
  emailVerified DateTime?
  image         String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  addresses     Address[]
  Order         Order[]
}

// user profile model
model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  firstName    String?
  lastName     String?
  contactEmail String?  @unique
  phone        String?
  picture      String?
  user         User?    @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// n to n user's addresses
model Address {
  id        String       @id @default(cuid())
  street    String
  city      String
  state     String?
  zip       String
  country   String
  isDefault Boolean      @default(false)
  type      AddressType? @default(DELIVERY)
  user      User         @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  CUSTOMER
  SELLER
  ADMIN
}

enum AddressType {
  DELIVERY
  BILLING
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id               String                    @id @default(cuid())
  name             String
  description      String
  price            Float
  image            String?
  brand            String
  rating           Int                       @default(0)
  count            Int                       @default(0)
  currentInventory Int
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime?                 @updatedAt
  category         Category?                 @relation(fields: [categoryId], references: [id])
  categoryId       String?
  order            Order?                    @relation(fields: [orderId], references: [id])
  orderId          String?
  availability     productAvailabilityStatus @default(IN_STOCK)

  @@index([categoryId])
  @@index([orderId])
}

enum productAvailabilityStatus {
  IN_STOCK
  OUT_OF_STOCK
  PRE_ORDER
}

model Order {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  user      User      @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}
